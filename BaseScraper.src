export
class BaseScraper {
  constructor(accessToken) {
    this.accessToken = accessToken;

    this.lastData = null;
    this.lastSHA = null;

    this.owner = null;
    this.repo = null;
    this.filePath = null;
    this.committer = null; // XXX differs

    this.testMode = false;
  }

  async scrapeAndStore() {
    let data = await this.fetchData();

    if (!data) {
      return void(this.print(this.filePath + "; no data")); // XXX I/O differs
    }

    if (this.testMode && !this.accessToken) {
      return void(this.print(JSON.stringify(data)));
    }

    throw Error("GitHub storage not implemented"); // XXX
  }

  fetchData() {
    return [];
  }

  print(...args) {
    // This should ultimately be handled by whatever is responsible for
    // implementing the abstract system interface.
    throw Error("abstract base class's print method not implemented");
  }
}
